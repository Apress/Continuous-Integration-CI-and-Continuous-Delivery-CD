# This is the primary pipeline. It consists of the stages of the 'Generic CI/CD pipeline' except for the production deployment stages

name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  paths:
    exclude:
      - /**/*.yml

# The Whispers tool is not directly retrieved from GitHub, 
# but from a repository in the Azure DevOps project
resources:
  repositories:
  - repository: whispers
    type: git
    name: whispers
    ref: refs/heads/master
  - repository: lambdaguard
    type: git
    name: lambdaguard
    ref: refs/heads/master

variables:
- group: test
- group: generic
- group: semver
- name: cacheKeyMonth
  value: $[format('{0:MMyyyy}', pipeline.startTime)]
- name: MAVEN_CACHE_FOLDER
  value: $(Pipeline.Workspace)/.m2/repository

  # Some magic to automate semantic versioning
  # Note, that minor is increased after each successful deployment to production
- name: major
  value: $[format('{0:yyyy}', pipeline.startTime)]
- name: patch
  ${{ if eq( variables['Build.SourceBranchName'], 'main') }}:
    value: $[counter(format('{0}.{1}.{2}',variables['major'], variables['minor'], variables['Build.SourceBranchName']), 0)]
- name: releaseVersion
  value: ??.??.??

stages:
  #################################################################################################################
  # STAGE: Validate entry criteria
  # Check whether variables are preconfigured
  #################################################################################################################
- stage: Validate_entry_criteria
  displayName: 'Validate entry criteria'
  condition: always()
  jobs:
  - job: Validate_entry_criteria
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all
    continueOnError: "false"

    steps:
      # Validate whether pipeline variables (stored in Variable Groups) are configured
      # The pipeline stops is a mandatory variable is not configured
    - script: |
        echo 'SonarCloud service connection is not configured'
        exit 1
      displayName: 'Exit if no SonarCloud service connection is configured'
      condition: eq(variables['service-connection-sonarcloud'], '')

    - script: |
        echo 'Azure DevOps Personal Access Token (PAT) is not configured'
        exit 1
      displayName: 'Exit if no Azure DevOps Personal Access Token (PAT) is configured'
      condition: and(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['personal-access-token'], ''))

    - script: |
        echo 'Azure DevOps User is not configured'
        exit 1
      displayName: 'Exit if no Azure DevOps User is configured'
      condition: and(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['azdo-user'], ''))

    - script: |
        echo "Nodejs version is not configured"
        exit 1
      displayName: 'Exit if no Node.js version is configured'
      condition: and(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['nodejs-version'], ''))

    - script: |
        echo 'CDK version is not configured'
        exit 1
      displayName: 'Exit if no AWS CDK version is configured'
      condition: and(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['cdk-version'], ''))

    - script: |
        echo 'Azure DevOps REST API is not configured'
        exit 1
      displayName: 'Exit if no Azure DevOps REST API is configured'
      condition: and(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['rest-api-vg'], ''))

      # Reset minor version if it is a new year (otherwise do nothing)
    - template: template/update-minor.yml
      parameters:
        tryReset: "true"

  #################################################################################################################
  # STAGE: Execute build + Perform unit tests + Package artifact + Publish artifact
  # Perform Maven build of the application and AWS CDK infrastructure code
  #################################################################################################################
- stage: Execute_build_publish
  displayName: 'Execute build, Perform unit tests and Package/Publish artifact'
  dependsOn: Validate_entry_criteria
  condition: succeeded()
  jobs:
  - job: Execute_build_publish
    pool:
      vmImage: 'ubuntu-latest'
      demands: maven
    workspace:
      clean: all
    continueOnError: "false"

    steps:
      # Add pipeline caching; force invalidating the cache each month
    - task: Cache@2
      displayName: 'Cache Maven local repo'
      inputs:
        key: 'maven | "$(Agent.OS)" | $(cacheKeyMonth) | **/pom.xml'
        path: $(MAVEN_CACHE_FOLDER)

      # Perform Maven 'feature build' if branch is not main
    - task: Maven@3
      condition: ne(variables['Build.SourceBranchName'], 'main')
      displayName: 'Build artifacts (feature branch)'
      inputs:
        goals: 'clean package -U'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        sonarQubeRunAnalysis: false
        options: '-B -DscmBranch=$(Build.SourceBranchName) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        testResultsFiles: '**/TEST-*.xml'
        publishJUnitResults: true

      # Determine the release version (this sets the releaseVersion variable)
    - template: template/derive-release-version.yml
      parameters:
        major: $(major)
        minor: $(minor)
        patch: $(patch)

      # Prepare Git repo for release tagging: Set commiter identity
    - script: |
         git config user.email $(azdo-user)
         git config user.name $(azdo-user)
         git checkout -b $(Build.SourceBranchName)
      condition: eq(variables['Build.SourceBranchName'], 'main')
      displayName: 'Prepare Git repo for release tagging'

      # Perform Maven 'release build' if branch is main
    - task: Maven@3
      condition: eq(variables['Build.SourceBranchName'], 'main')
      displayName: 'Build artifacts (main branch)'
      inputs:
        goals: 'clean package -U'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        sonarQubeRunAnalysis: false
        options: '-B scm:tag -Dtag=$(releaseVersion) -Dusername=$(azdo-user) -Dpassword=$(personal-access-token) -DscmBranch=$(Build.SourceBranchName) -Drevision=$(releaseVersion) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        testResultsFiles: '**/TEST-*.xml'
        publishJUnitResults: true

      # Unset commiter identity
    - script: |
          git config --unset user.email
          git config --unset user.name
          git checkout $(Build.SourceVersion)
          git branch -D $(Build.SourceBranchName)
      condition: eq(variables['Build.SourceBranchName'], 'main')
      displayName: 'Unset commiter identity'

      # Tag the pipeline if a release artifact is build
    - script: |
        echo "##vso[build.addbuildtag]$(releaseVersion)"
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
      displayName: 'Tag the pipeline with a version'

      # Create a SH256 checksum of the application jar file
    - script: |
        export application=`find $(Pipeline.Workspace) -name application*shaded.jar`
        echo "SHA256 checksum of $application"
        sha256sum $application
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
      displayName: 'Calculate SHA256 checksum of the application jar file'

      # Publish the artifacts
    - task: CopyFiles@2
      displayName: 'Copy artifacts to the staging directory'
      inputs:
        contents: '**/target/*.jar'
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: myapp-artifacts

  #################################################################################################################
  # STAGE: Analyze code
  # This stage runs in parallel with the Execute_build_publish stage to speed up the pipeline execution time.
  # It makes use of SonarCloud to validate the Java code amd Whispers to check on secrets in the respo.
  #################################################################################################################
- stage: Analyze_code
  displayName: 'Analyze code'
  dependsOn: Validate_entry_criteria
  condition: succeeded()
  jobs:
    # Perform SonarCloud analysis
  - job: SonarCloud
    pool:
      vmImage: 'ubuntu-latest'
      demands: maven
    workspace:
      clean: all
    continueOnError: "false"

    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: $(service-connection-sonarcloud)
        organization: 'mycorp-com'
        scannerMode: 'Other'
        extraProperties: |
          # Additional properties that will be passed to the scanner,
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.projectKey=mycorp-com_myapp
          sonar.projectName=myapp

      # Add pipeline caching; force invalidating the cache each month
    - task: Cache@2
      displayName: 'Cache Maven local repo'
      inputs:
        key: 'cucumber | "$(Agent.OS)" | $(cacheKeyMonth) | **/pom.xml'
        path: $(MAVEN_CACHE_FOLDER)

      # Perform Sonar Cloud check; do not pass the release version because this is not a release build
    - task: Maven@3
      condition: ne(variables['Build.SourceBranchName'], 'main')
      displayName: 'Sonar Cloud build if branch <> main'
      inputs:
        goals: 'clean verify -U sonar:sonar -DskipTests'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        sonarQubeRunAnalysis: true
        options: '-B -DscmBranch=$(Build.SourceBranchName) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        publishJUnitResults: false

      # Determine the release version (this sets the releaseVersion variable, which is needed as identification in SonarCloud)
    - template: template/derive-release-version.yml
      parameters:
        major: $(major)
        minor: $(minor)
        patch: $(patch)

      # Perform Sonar Cloud check; pass the release version because this IS a release build
    - task: Maven@3
      condition: eq(variables['Build.SourceBranchName'], 'main')
      displayName: 'Sonar Cloud build if branch == main'
      inputs:
        goals: 'clean verify -U sonar:sonar -DskipTests'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        sonarQubeRunAnalysis: true
        options: '-B -DscmBranch=$(Build.SourceBranchName) -Drevision=$(releaseVersion) -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        publishJUnitResults: false

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    - task: sonarcloud-buildbreaker@2
      displayName: 'Sonar Cloud build breaker'
      inputs:
        SonarCloud: 'ServiceConnectionSonarCloud'
        organization: 'mycorp-com'

    # Perform scanning on hardcoded credentials and dangerous functions
  - job: Whispers
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all
    continueOnError: "false"

    steps:
    - checkout: self
    - checkout: whispers
    - script: |
        cd whispers
        sudo make install
        cd ..
        echo "Scan myapp"
        whispers --output ./whispers-out.yml ./myapp
        cat ./whispers-out.yml
      displayName: 'Scan to find hardcoded credentials and dangerous functions'

    - template: template/stage-completed.yml
      parameters:
        status: ANALYZE-CODE-COMPLETED

  #################################################################################################################
  # STAGE: Provision test environment 
  # Bootstrap the AWS account, to create the infrastructure that makes CDK deployment possible
  # This stage is only executed if both the Execute_build_publish and Analyze_code are successfully executed and
  # the branch is 'main'
  #################################################################################################################
- stage: Provision_test_environment
  displayName: 'Provision test environment'
  dependsOn:
    - Execute_build_publish
    - Analyze_code
  condition: and (succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: Provision_test_environment
    environment: test
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all
    continueOnError: "false"
    strategy:
      runOnce:
        deploy:
          steps:
            # Provision the infrastructure
          - template: template/provision-infra.yml

  #################################################################################################################
  # STAGE: Deploy artifact to test
  # This stage is only executed if Provision_test_environment is successfully executed and the branch is 'main'
  #################################################################################################################
- stage: Deploy_artifact_to_test
  displayName: 'Deploy artifact to test'
  dependsOn: Provision_test_environment
  condition: and (succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: Deploy_artifact_to_test
    environment: test
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all
    continueOnError: "false"
    strategy:
      runOnce:
        deploy:
          steps:
            # Download the artifacts from the build stage
          - task: DownloadPipelineArtifact@2
            displayName: Download artifacts from Execute build stage
            inputs:
              source: 'current'
              allowPartiallySucceededBuilds: 'true'

            # Derive the release version
          - template: template/derive-release-version.yml
            parameters:
              major: $(major)
              minor: $(minor)
              patch: $(patch)

            # Provision the infrastructure and install the application
          - template: template/deploy.yml
            parameters:
              version: $(releaseVersion)

  #################################################################################################################
  # STAGE: Perform test
  #################################################################################################################
- stage: Perform_test
  displayName: 'Perform test'
  dependsOn: Deploy_artifact_to_test
  condition: and (succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - job: Perform_test
    pool:
      vmImage: 'ubuntu-latest'
      demands: maven
    workspace:
      clean: all
    continueOnError: "false"

    steps:
      # Add pipeline caching; force invalidating the cache each month
    - task: Cache@2
      displayName: 'Cache Maven local repo'
      inputs:
        key: 'cucumber | "$(Agent.OS)" | $(cacheKeyMonth) | **/cucumber/pom.xml'
        path: $(MAVEN_CACHE_FOLDER)

      # Perform Cucumber test
      # The test invokes the actual Lambda instance deployed on AWS
    - task: AWSShellScript@1
      inputs:
        awsCredentials: $(service-connection-aws-account)
        regionName: $(aws-region)
        scriptType: 'inline'
        inlineScript: |
          #!/bin/bash
          set -ex
          mvn -f cucumber/ test -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)

      displayName: 'Execute Cucumber test'

    - template: template/stage-completed.yml
      parameters:
        status: PERFORM-TEST-COMPLETED

  #################################################################################################################
  # STAGE: Validate infrastructure compliance
  #################################################################################################################
- stage: Validate_infrastructure_compliance
  displayName: 'Validate infrastructure compliance'
  dependsOn: Perform_test
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - job: Validate_infrastructure_compliance
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: "false"

    steps:
      # Checkout the lambdaguard repo 
    - checkout: lambdaguard

      # Execute Lambdaguard in an AWS Shell
    - task: AWSShellScript@1
      inputs:
        awsCredentials: $(service-connection-aws-account)
        regionName: $(aws-region)
        scriptType: 'inline'
        inlineScript: |
          # Install Lambdaguard and validate myLambda in AWS
          python -m pip install ./
          lambdaguard --keys $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY --region $(aws-region) --function arn:aws:lambda:$(aws-region):$(aws-account):function:myLambda --verbose --output ./mylambda-report
      displayName: 'Install Lambdaguard and validate myLambda in AWS'

      # Copy the report and ....
    - task: CopyFiles@2
      inputs:
        SourceFolder: ./mylambda-report
        Contents: '**/report.html'
        TargetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy Lambdaguard report'

      # ... publish the report
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: lambdaguard
      displayName: 'Publish Lambdaguard report'

    - template: template/stage-completed.yml
      parameters:
        status: VALIDATE-INFRASTRUCTURE-COMPLIANCE-COMPLETED

  #################################################################################################################
  # STAGE: Notify actor 
  #################################################################################################################
- stage: Notify_actor
  displayName: 'Notify actor'
  condition: always()
  jobs:
  - job: Notify_actor
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: "true"

    steps:
    - script: |
        echo 'Notify actor: Use Project settings > Notifications, to target specific users/groups by email'
        echo 'Currently no external system needs to be notified using a custom API call'
      displayName: 'Finalize'
